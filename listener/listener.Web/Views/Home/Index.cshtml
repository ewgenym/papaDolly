@section scripts
{
    <style>
        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
    </style>

    <script src="~/Scripts/d3/d3.js"></script>
    <script src="~/Scripts/c3/c3.min.js"></script>
    <script src="~/Scripts/JSMQ.js"></script>
    <script src="~/Scripts/moment.min.js"></script>

    <link href="~/Scripts/c3/c3.min.css" rel="stylesheet" type="text/css">
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css"/>

    <script type="text/javascript">
        var maxDataLen = 100;
        var chart, lineData = ["host"];
        var free = "Free";
        var occupied = "Occupied";
        var unknown = "Unknown";
        var noActivityTimeout = 40000;
        var startedPayingAt;

        for (var i = 1; i < maxDataLen; i++) {
            lineData[i] = 0;
        }

        $(function() {
            var subscriber = new JSMQ.Subscriber();
            subscriber.connect("@ViewBag.Endpoint");
            subscriber.subscribe("");

            chart = initChart();

            var pushChartValue = function(value) {
                if (lineData.length >= maxDataLen) {
                    lineData.shift();
                    lineData.shift();
                    lineData.unshift('host');
                }

                lineData.push(value);
            }

            var setStatus = function(status) {
                var statusEl = $("#status");
                statusEl.text(status);

                statusEl.removeClass();
                statusEl.addClass("label");

                if (status === free) {
                    statusEl.addClass("label-success");
                } else if (status === occupied) {
                    statusEl.addClass("label-danger");
                } else if (status === unknown) {
                    statusEl.addClass("label-warning");
                }
            }

            var setPlayingTime = function(value) {
                var timeEl = $("#playTime");
                timeEl.text(value);
            }

            subscriber.sendReady = function() {
                setStatus(free);
            };

            subscriber.deactivated_c = function() {
                setStatus(unknown);
            };

            var statusTimer;
            //Table event received
            subscriber.onMessage = function(message) {
                pushChartValue(100);
                if (startedPayingAt === undefined) {
                    startedPayingAt = new Date();
                }

                setStatus(occupied);

                if (statusTimer) {
                    clearInterval(statusTimer);
                    statusTimer = undefined;
                }

                statusTimer = setInterval(function() {
                    startedPayingAt = undefined;
                    setStatus(free);
                }, noActivityTimeout); //No activity during this perios is considered as free table
            };

            setInterval(function() {
                //Make the chart move on
                pushChartValue(0);
                chart.load({
                    columns: [
                        lineData
                    ]
                });
                //Track occupied time
                if (startedPayingAt !== undefined) {
                    var now = new Date();
                    var differenceInPlainText = moment(startedPayingAt).from(moment(now), true);
                    setPlayingTime("Playing so far: " + differenceInPlainText);
                } else {
                    setPlayingTime("");
                }
            }, 1000);
        });

        function initChart() {
            return c3.generate({
                bindto: '#chart',
                data: {
                    columns: [
                        lineData
                    ]
                },
                axis: {
                    y: {
                        max: 200,
                        min: 0
                    },
                    x: {
                        tick: {
                            count: 10,
                            format: function(x) { return ''; }
                        }
                    }
                },
                tooltip: {
                    show: false
                },
                transition: {
                    duration: 0
                },
                point: {
                    show: false
                }
            });
        }
    </script>

}

<div class="container">
    <h3 class="page-header">Ping-pong table status (2nd floor):
        <span id="status" class="label label-warning">Unknown</span>
        <span id="playTime" class="label label-default"></span>
    </h3>
    <div class="row">
        <div id="chart"></div>
    </div>
</div>
